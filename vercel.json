{
  "version": 2,
  "name": "123hansa-staging",
  "outputDirectory": "dist",
  "buildCommand": "node -e \"const fs = require('fs'); const path = require('path'); const { execSync } = require('child_process'); let rootDir = process.cwd(); while (!fs.existsSync(path.join(rootDir, 'package.json')) || !fs.existsSync(path.join(rootDir, 'apps'))) { rootDir = path.dirname(rootDir); } console.log('Root dir:', rootDir); process.chdir(rootDir); fs.mkdirSync('packages/shared/src', {recursive: true}); fs.mkdirSync('packages/ui/src', {recursive: true}); fs.writeFileSync('packages/shared/src/index.ts', 'export {};'); fs.writeFileSync('packages/ui/src/index.ts', 'export {};'); fs.writeFileSync('packages/shared/package.json', JSON.stringify({name: '@gohansa/shared', version: '1.0.0', main: 'src/index.ts'})); fs.writeFileSync('packages/ui/package.json', JSON.stringify({name: '@gohansa/ui', version: '1.0.0', main: 'src/index.ts'})); process.chdir('apps/web'); execSync('npm install --include=dev', {stdio: 'inherit'}); execSync('npm run build', {stdio: 'inherit'}); process.chdir(rootDir); fs.cpSync('apps/web/dist', 'dist', {recursive: true}); console.log('Build completed successfully');\"",
  "installCommand": "npm install",
  "env": {
    "NODE_ENV": "staging",
    "VITE_API_URL": "https://staging-123hansa.vercel.app/api",
    "NODE_VERSION": "18.x"
  },
  "headers": [
    {
      "source": "/api/(.*)",
      "headers": [
        {
          "key": "Access-Control-Allow-Origin",
          "value": "https://staging-123hansa.vercel.app"
        },
        {
          "key": "Access-Control-Allow-Methods",
          "value": "GET, POST, PUT, DELETE, OPTIONS"
        },
        {
          "key": "Access-Control-Allow-Headers",
          "value": "Content-Type, Authorization"
        },
        {
          "key": "X-Content-Type-Options",
          "value": "nosniff"
        },
        {
          "key": "X-Frame-Options",
          "value": "DENY"
        },
        {
          "key": "X-XSS-Protection",
          "value": "1; mode=block"
        },
        {
          "key": "Referrer-Policy",
          "value": "strict-origin-when-cross-origin"
        },
        {
          "key": "X-Environment",
          "value": "staging"
        }
      ]
    },
    {
      "source": "/(.*)",
      "headers": [
        {
          "key": "X-Content-Type-Options",
          "value": "nosniff"
        },
        {
          "key": "X-Frame-Options",
          "value": "DENY"
        },
        {
          "key": "X-XSS-Protection",
          "value": "1; mode=block"
        },
        {
          "key": "Referrer-Policy",
          "value": "strict-origin-when-cross-origin"
        },
        {
          "key": "X-Environment",
          "value": "staging"
        }
      ]
    }
  ],
  "redirects": [
    {
      "source": "/servicematch.se/(.*)",
      "destination": "/",
      "permanent": true
    },
    {
      "source": "/tubba/(.*)",
      "destination": "/",
      "permanent": true
    }
  ],
  "rewrites": [
    {
      "source": "/((?!api).*)",
      "destination": "/index.html"
    }
  ]
}